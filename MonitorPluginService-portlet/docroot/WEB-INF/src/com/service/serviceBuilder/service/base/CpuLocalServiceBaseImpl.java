/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.service.serviceBuilder.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.service.serviceBuilder.model.Cpu;
import com.service.serviceBuilder.service.CpuLocalService;
import com.service.serviceBuilder.service.persistence.CpuPersistence;
import com.service.serviceBuilder.service.persistence.RamPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cpu local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.service.serviceBuilder.service.impl.CpuLocalServiceImpl}.
 * </p>
 *
 * @author NgocBao
 * @see com.service.serviceBuilder.service.impl.CpuLocalServiceImpl
 * @see com.service.serviceBuilder.service.CpuLocalServiceUtil
 * @generated
 */
public abstract class CpuLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CpuLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.service.serviceBuilder.service.CpuLocalServiceUtil} to access the cpu local service.
	 */

	/**
	 * Adds the cpu to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cpu the cpu
	 * @return the cpu that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Cpu addCpu(Cpu cpu) throws SystemException {
		cpu.setNew(true);

		return cpuPersistence.update(cpu);
	}

	/**
	 * Creates a new cpu with the primary key. Does not add the cpu to the database.
	 *
	 * @param cpuId the primary key for the new cpu
	 * @return the new cpu
	 */
	@Override
	public Cpu createCpu(long cpuId) {
		return cpuPersistence.create(cpuId);
	}

	/**
	 * Deletes the cpu with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cpuId the primary key of the cpu
	 * @return the cpu that was removed
	 * @throws PortalException if a cpu with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Cpu deleteCpu(long cpuId) throws PortalException, SystemException {
		return cpuPersistence.remove(cpuId);
	}

	/**
	 * Deletes the cpu from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cpu the cpu
	 * @return the cpu that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Cpu deleteCpu(Cpu cpu) throws SystemException {
		return cpuPersistence.remove(cpu);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Cpu.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return cpuPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.service.serviceBuilder.model.impl.CpuModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return cpuPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.service.serviceBuilder.model.impl.CpuModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return cpuPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return cpuPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return cpuPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Cpu fetchCpu(long cpuId) throws SystemException {
		return cpuPersistence.fetchByPrimaryKey(cpuId);
	}

	/**
	 * Returns the cpu with the primary key.
	 *
	 * @param cpuId the primary key of the cpu
	 * @return the cpu
	 * @throws PortalException if a cpu with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Cpu getCpu(long cpuId) throws PortalException, SystemException {
		return cpuPersistence.findByPrimaryKey(cpuId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return cpuPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cpus.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.service.serviceBuilder.model.impl.CpuModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cpus
	 * @param end the upper bound of the range of cpus (not inclusive)
	 * @return the range of cpus
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Cpu> getCpus(int start, int end) throws SystemException {
		return cpuPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cpus.
	 *
	 * @return the number of cpus
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCpusCount() throws SystemException {
		return cpuPersistence.countAll();
	}

	/**
	 * Updates the cpu in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cpu the cpu
	 * @return the cpu that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Cpu updateCpu(Cpu cpu) throws SystemException {
		return cpuPersistence.update(cpu);
	}

	/**
	 * Returns the cpu local service.
	 *
	 * @return the cpu local service
	 */
	public com.service.serviceBuilder.service.CpuLocalService getCpuLocalService() {
		return cpuLocalService;
	}

	/**
	 * Sets the cpu local service.
	 *
	 * @param cpuLocalService the cpu local service
	 */
	public void setCpuLocalService(
		com.service.serviceBuilder.service.CpuLocalService cpuLocalService) {
		this.cpuLocalService = cpuLocalService;
	}

	/**
	 * Returns the cpu remote service.
	 *
	 * @return the cpu remote service
	 */
	public com.service.serviceBuilder.service.CpuService getCpuService() {
		return cpuService;
	}

	/**
	 * Sets the cpu remote service.
	 *
	 * @param cpuService the cpu remote service
	 */
	public void setCpuService(
		com.service.serviceBuilder.service.CpuService cpuService) {
		this.cpuService = cpuService;
	}

	/**
	 * Returns the cpu persistence.
	 *
	 * @return the cpu persistence
	 */
	public CpuPersistence getCpuPersistence() {
		return cpuPersistence;
	}

	/**
	 * Sets the cpu persistence.
	 *
	 * @param cpuPersistence the cpu persistence
	 */
	public void setCpuPersistence(CpuPersistence cpuPersistence) {
		this.cpuPersistence = cpuPersistence;
	}

	/**
	 * Returns the ram local service.
	 *
	 * @return the ram local service
	 */
	public com.service.serviceBuilder.service.RamLocalService getRamLocalService() {
		return ramLocalService;
	}

	/**
	 * Sets the ram local service.
	 *
	 * @param ramLocalService the ram local service
	 */
	public void setRamLocalService(
		com.service.serviceBuilder.service.RamLocalService ramLocalService) {
		this.ramLocalService = ramLocalService;
	}

	/**
	 * Returns the ram remote service.
	 *
	 * @return the ram remote service
	 */
	public com.service.serviceBuilder.service.RamService getRamService() {
		return ramService;
	}

	/**
	 * Sets the ram remote service.
	 *
	 * @param ramService the ram remote service
	 */
	public void setRamService(
		com.service.serviceBuilder.service.RamService ramService) {
		this.ramService = ramService;
	}

	/**
	 * Returns the ram persistence.
	 *
	 * @return the ram persistence
	 */
	public RamPersistence getRamPersistence() {
		return ramPersistence;
	}

	/**
	 * Sets the ram persistence.
	 *
	 * @param ramPersistence the ram persistence
	 */
	public void setRamPersistence(RamPersistence ramPersistence) {
		this.ramPersistence = ramPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		com.service.serviceBuilder.service.CpuLocalServiceUtil.clearService();

		PersistedModelLocalServiceRegistryUtil.register("com.service.serviceBuilder.model.Cpu",
			cpuLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.service.serviceBuilder.model.Cpu");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Cpu.class;
	}

	protected String getModelClassName() {
		return Cpu.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = cpuPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.service.serviceBuilder.service.CpuLocalService.class)
	protected com.service.serviceBuilder.service.CpuLocalService cpuLocalService;
	@BeanReference(type = com.service.serviceBuilder.service.CpuService.class)
	protected com.service.serviceBuilder.service.CpuService cpuService;
	@BeanReference(type = CpuPersistence.class)
	protected CpuPersistence cpuPersistence;
	@BeanReference(type = com.service.serviceBuilder.service.RamLocalService.class)
	protected com.service.serviceBuilder.service.RamLocalService ramLocalService;
	@BeanReference(type = com.service.serviceBuilder.service.RamService.class)
	protected com.service.serviceBuilder.service.RamService ramService;
	@BeanReference(type = RamPersistence.class)
	protected RamPersistence ramPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CpuLocalServiceClpInvoker _clpInvoker = new CpuLocalServiceClpInvoker();
}