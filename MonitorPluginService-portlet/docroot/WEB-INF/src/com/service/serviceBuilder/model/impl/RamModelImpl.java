/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.service.serviceBuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.service.serviceBuilder.model.Ram;
import com.service.serviceBuilder.model.RamModel;
import com.service.serviceBuilder.model.RamSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Ram service. Represents a row in the &quot;Ram&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.service.serviceBuilder.model.RamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RamImpl}.
 * </p>
 *
 * @author NgocBao
 * @see RamImpl
 * @see com.service.serviceBuilder.model.Ram
 * @see com.service.serviceBuilder.model.RamModel
 * @generated
 */
@JSON(strict = true)
public class RamModelImpl extends BaseModelImpl<Ram> implements RamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ram model instance should use the {@link com.service.serviceBuilder.model.Ram} interface instead.
	 */
	public static final String TABLE_NAME = "Ram";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ramId", Types.BIGINT },
			{ "time_", Types.TIMESTAMP },
			{ "min", Types.DOUBLE },
			{ "max", Types.DOUBLE },
			{ "aver", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table Ram (ramId LONG not null primary key,time_ DATE null,min DOUBLE,max DOUBLE,aver DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table Ram";
	public static final String ORDER_BY_JPQL = " ORDER BY ram.ramId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Ram.ramId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.service.serviceBuilder.model.Ram"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.service.serviceBuilder.model.Ram"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Ram toModel(RamSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Ram model = new RamImpl();

		model.setRamId(soapModel.getRamId());
		model.setTime(soapModel.getTime());
		model.setMin(soapModel.getMin());
		model.setMax(soapModel.getMax());
		model.setAver(soapModel.getAver());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Ram> toModels(RamSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Ram> models = new ArrayList<Ram>(soapModels.length);

		for (RamSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.service.serviceBuilder.model.Ram"));

	public RamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ramId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRamId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ramId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ram.class;
	}

	@Override
	public String getModelClassName() {
		return Ram.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ramId", getRamId());
		attributes.put("time", getTime());
		attributes.put("min", getMin());
		attributes.put("max", getMax());
		attributes.put("aver", getAver());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ramId = (Long)attributes.get("ramId");

		if (ramId != null) {
			setRamId(ramId);
		}

		Date time = (Date)attributes.get("time");

		if (time != null) {
			setTime(time);
		}

		Double min = (Double)attributes.get("min");

		if (min != null) {
			setMin(min);
		}

		Double max = (Double)attributes.get("max");

		if (max != null) {
			setMax(max);
		}

		Double aver = (Double)attributes.get("aver");

		if (aver != null) {
			setAver(aver);
		}
	}

	@JSON
	@Override
	public long getRamId() {
		return _ramId;
	}

	@Override
	public void setRamId(long ramId) {
		_ramId = ramId;
	}

	@JSON
	@Override
	public Date getTime() {
		return _time;
	}

	@Override
	public void setTime(Date time) {
		_time = time;
	}

	@JSON
	@Override
	public double getMin() {
		return _min;
	}

	@Override
	public void setMin(double min) {
		_min = min;
	}

	@JSON
	@Override
	public double getMax() {
		return _max;
	}

	@Override
	public void setMax(double max) {
		_max = max;
	}

	@JSON
	@Override
	public double getAver() {
		return _aver;
	}

	@Override
	public void setAver(double aver) {
		_aver = aver;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Ram.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Ram toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Ram)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RamImpl ramImpl = new RamImpl();

		ramImpl.setRamId(getRamId());
		ramImpl.setTime(getTime());
		ramImpl.setMin(getMin());
		ramImpl.setMax(getMax());
		ramImpl.setAver(getAver());

		ramImpl.resetOriginalValues();

		return ramImpl;
	}

	@Override
	public int compareTo(Ram ram) {
		int value = 0;

		if (getRamId() < ram.getRamId()) {
			value = -1;
		}
		else if (getRamId() > ram.getRamId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Ram)) {
			return false;
		}

		Ram ram = (Ram)obj;

		long primaryKey = ram.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Ram> toCacheModel() {
		RamCacheModel ramCacheModel = new RamCacheModel();

		ramCacheModel.ramId = getRamId();

		Date time = getTime();

		if (time != null) {
			ramCacheModel.time = time.getTime();
		}
		else {
			ramCacheModel.time = Long.MIN_VALUE;
		}

		ramCacheModel.min = getMin();

		ramCacheModel.max = getMax();

		ramCacheModel.aver = getAver();

		return ramCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{ramId=");
		sb.append(getRamId());
		sb.append(", time=");
		sb.append(getTime());
		sb.append(", min=");
		sb.append(getMin());
		sb.append(", max=");
		sb.append(getMax());
		sb.append(", aver=");
		sb.append(getAver());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.service.serviceBuilder.model.Ram");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ramId</column-name><column-value><![CDATA[");
		sb.append(getRamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>time</column-name><column-value><![CDATA[");
		sb.append(getTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>min</column-name><column-value><![CDATA[");
		sb.append(getMin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>max</column-name><column-value><![CDATA[");
		sb.append(getMax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aver</column-name><column-value><![CDATA[");
		sb.append(getAver());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Ram.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Ram.class };
	private long _ramId;
	private Date _time;
	private double _min;
	private double _max;
	private double _aver;
	private Ram _escapedModel;
}