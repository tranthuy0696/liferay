/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nlu.entity.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nlu.entity.model.Alarm;
import com.nlu.entity.model.AlarmModel;
import com.nlu.entity.model.AlarmSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Alarm service. Represents a row in the &quot;Alarm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nlu.entity.model.AlarmModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AlarmImpl}.
 * </p>
 *
 * @author NgocBao
 * @see AlarmImpl
 * @see com.nlu.entity.model.Alarm
 * @see com.nlu.entity.model.AlarmModel
 * @generated
 */
@JSON(strict = true)
public class AlarmModelImpl extends BaseModelImpl<Alarm> implements AlarmModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a alarm model instance should use the {@link com.nlu.entity.model.Alarm} interface instead.
	 */
	public static final String TABLE_NAME = "Alarm";
	public static final Object[][] TABLE_COLUMNS = {
			{ "alarmId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "startTime", Types.INTEGER },
			{ "endTime", Types.INTEGER },
			{ "value", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table Alarm (alarmId LONG not null primary key,name VARCHAR(75) null,startTime INTEGER,endTime INTEGER,value DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table Alarm";
	public static final String ORDER_BY_JPQL = " ORDER BY alarm.alarmId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Alarm.alarmId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nlu.entity.model.Alarm"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nlu.entity.model.Alarm"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Alarm toModel(AlarmSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Alarm model = new AlarmImpl();

		model.setAlarmId(soapModel.getAlarmId());
		model.setName(soapModel.getName());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setValue(soapModel.getValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Alarm> toModels(AlarmSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Alarm> models = new ArrayList<Alarm>(soapModels.length);

		for (AlarmSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nlu.entity.model.Alarm"));

	public AlarmModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _alarmId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAlarmId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _alarmId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Alarm.class;
	}

	@Override
	public String getModelClassName() {
		return Alarm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("alarmId", getAlarmId());
		attributes.put("name", getName());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long alarmId = (Long)attributes.get("alarmId");

		if (alarmId != null) {
			setAlarmId(alarmId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer startTime = (Integer)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Integer endTime = (Integer)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		Double value = (Double)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@JSON
	@Override
	public long getAlarmId() {
		return _alarmId;
	}

	@Override
	public void setAlarmId(long alarmId) {
		_alarmId = alarmId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public int getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(int startTime) {
		_startTime = startTime;
	}

	@JSON
	@Override
	public int getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(int endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public double getValue() {
		return _value;
	}

	@Override
	public void setValue(double value) {
		_value = value;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Alarm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Alarm toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Alarm)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AlarmImpl alarmImpl = new AlarmImpl();

		alarmImpl.setAlarmId(getAlarmId());
		alarmImpl.setName(getName());
		alarmImpl.setStartTime(getStartTime());
		alarmImpl.setEndTime(getEndTime());
		alarmImpl.setValue(getValue());

		alarmImpl.resetOriginalValues();

		return alarmImpl;
	}

	@Override
	public int compareTo(Alarm alarm) {
		long primaryKey = alarm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Alarm)) {
			return false;
		}

		Alarm alarm = (Alarm)obj;

		long primaryKey = alarm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Alarm> toCacheModel() {
		AlarmCacheModel alarmCacheModel = new AlarmCacheModel();

		alarmCacheModel.alarmId = getAlarmId();

		alarmCacheModel.name = getName();

		String name = alarmCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			alarmCacheModel.name = null;
		}

		alarmCacheModel.startTime = getStartTime();

		alarmCacheModel.endTime = getEndTime();

		alarmCacheModel.value = getValue();

		return alarmCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{alarmId=");
		sb.append(getAlarmId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.nlu.entity.model.Alarm");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>alarmId</column-name><column-value><![CDATA[");
		sb.append(getAlarmId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Alarm.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Alarm.class };
	private long _alarmId;
	private String _name;
	private int _startTime;
	private int _endTime;
	private double _value;
	private Alarm _escapedModel;
}