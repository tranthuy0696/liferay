/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nlu.entity.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.nlu.entity.model.Alarm;
import com.nlu.entity.service.AlarmLocalService;
import com.nlu.entity.service.persistence.AlarmFinder;
import com.nlu.entity.service.persistence.AlarmInfoPersistence;
import com.nlu.entity.service.persistence.AlarmPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the alarm local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.nlu.entity.service.impl.AlarmLocalServiceImpl}.
 * </p>
 *
 * @author NgocBao
 * @see com.nlu.entity.service.impl.AlarmLocalServiceImpl
 * @see com.nlu.entity.service.AlarmLocalServiceUtil
 * @generated
 */
public abstract class AlarmLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements AlarmLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.nlu.entity.service.AlarmLocalServiceUtil} to access the alarm local service.
	 */

	/**
	 * Adds the alarm to the database. Also notifies the appropriate model listeners.
	 *
	 * @param alarm the alarm
	 * @return the alarm that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Alarm addAlarm(Alarm alarm) throws SystemException {
		alarm.setNew(true);

		return alarmPersistence.update(alarm);
	}

	/**
	 * Creates a new alarm with the primary key. Does not add the alarm to the database.
	 *
	 * @param alarmId the primary key for the new alarm
	 * @return the new alarm
	 */
	@Override
	public Alarm createAlarm(long alarmId) {
		return alarmPersistence.create(alarmId);
	}

	/**
	 * Deletes the alarm with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param alarmId the primary key of the alarm
	 * @return the alarm that was removed
	 * @throws PortalException if a alarm with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Alarm deleteAlarm(long alarmId)
		throws PortalException, SystemException {
		return alarmPersistence.remove(alarmId);
	}

	/**
	 * Deletes the alarm from the database. Also notifies the appropriate model listeners.
	 *
	 * @param alarm the alarm
	 * @return the alarm that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Alarm deleteAlarm(Alarm alarm) throws SystemException {
		return alarmPersistence.remove(alarm);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Alarm.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return alarmPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nlu.entity.model.impl.AlarmModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return alarmPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nlu.entity.model.impl.AlarmModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return alarmPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return alarmPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return alarmPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Alarm fetchAlarm(long alarmId) throws SystemException {
		return alarmPersistence.fetchByPrimaryKey(alarmId);
	}

	/**
	 * Returns the alarm with the primary key.
	 *
	 * @param alarmId the primary key of the alarm
	 * @return the alarm
	 * @throws PortalException if a alarm with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Alarm getAlarm(long alarmId) throws PortalException, SystemException {
		return alarmPersistence.findByPrimaryKey(alarmId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return alarmPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the alarms.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nlu.entity.model.impl.AlarmModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of alarms
	 * @param end the upper bound of the range of alarms (not inclusive)
	 * @return the range of alarms
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Alarm> getAlarms(int start, int end) throws SystemException {
		return alarmPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of alarms.
	 *
	 * @return the number of alarms
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getAlarmsCount() throws SystemException {
		return alarmPersistence.countAll();
	}

	/**
	 * Updates the alarm in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param alarm the alarm
	 * @return the alarm that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Alarm updateAlarm(Alarm alarm) throws SystemException {
		return alarmPersistence.update(alarm);
	}

	/**
	 * Returns the alarm local service.
	 *
	 * @return the alarm local service
	 */
	public com.nlu.entity.service.AlarmLocalService getAlarmLocalService() {
		return alarmLocalService;
	}

	/**
	 * Sets the alarm local service.
	 *
	 * @param alarmLocalService the alarm local service
	 */
	public void setAlarmLocalService(
		com.nlu.entity.service.AlarmLocalService alarmLocalService) {
		this.alarmLocalService = alarmLocalService;
	}

	/**
	 * Returns the alarm remote service.
	 *
	 * @return the alarm remote service
	 */
	public com.nlu.entity.service.AlarmService getAlarmService() {
		return alarmService;
	}

	/**
	 * Sets the alarm remote service.
	 *
	 * @param alarmService the alarm remote service
	 */
	public void setAlarmService(
		com.nlu.entity.service.AlarmService alarmService) {
		this.alarmService = alarmService;
	}

	/**
	 * Returns the alarm persistence.
	 *
	 * @return the alarm persistence
	 */
	public AlarmPersistence getAlarmPersistence() {
		return alarmPersistence;
	}

	/**
	 * Sets the alarm persistence.
	 *
	 * @param alarmPersistence the alarm persistence
	 */
	public void setAlarmPersistence(AlarmPersistence alarmPersistence) {
		this.alarmPersistence = alarmPersistence;
	}

	/**
	 * Returns the alarm finder.
	 *
	 * @return the alarm finder
	 */
	public AlarmFinder getAlarmFinder() {
		return alarmFinder;
	}

	/**
	 * Sets the alarm finder.
	 *
	 * @param alarmFinder the alarm finder
	 */
	public void setAlarmFinder(AlarmFinder alarmFinder) {
		this.alarmFinder = alarmFinder;
	}

	/**
	 * Returns the alarm info local service.
	 *
	 * @return the alarm info local service
	 */
	public com.nlu.entity.service.AlarmInfoLocalService getAlarmInfoLocalService() {
		return alarmInfoLocalService;
	}

	/**
	 * Sets the alarm info local service.
	 *
	 * @param alarmInfoLocalService the alarm info local service
	 */
	public void setAlarmInfoLocalService(
		com.nlu.entity.service.AlarmInfoLocalService alarmInfoLocalService) {
		this.alarmInfoLocalService = alarmInfoLocalService;
	}

	/**
	 * Returns the alarm info remote service.
	 *
	 * @return the alarm info remote service
	 */
	public com.nlu.entity.service.AlarmInfoService getAlarmInfoService() {
		return alarmInfoService;
	}

	/**
	 * Sets the alarm info remote service.
	 *
	 * @param alarmInfoService the alarm info remote service
	 */
	public void setAlarmInfoService(
		com.nlu.entity.service.AlarmInfoService alarmInfoService) {
		this.alarmInfoService = alarmInfoService;
	}

	/**
	 * Returns the alarm info persistence.
	 *
	 * @return the alarm info persistence
	 */
	public AlarmInfoPersistence getAlarmInfoPersistence() {
		return alarmInfoPersistence;
	}

	/**
	 * Sets the alarm info persistence.
	 *
	 * @param alarmInfoPersistence the alarm info persistence
	 */
	public void setAlarmInfoPersistence(
		AlarmInfoPersistence alarmInfoPersistence) {
		this.alarmInfoPersistence = alarmInfoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.nlu.entity.model.Alarm",
			alarmLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.nlu.entity.model.Alarm");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Alarm.class;
	}

	protected String getModelClassName() {
		return Alarm.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = alarmPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.nlu.entity.service.AlarmLocalService.class)
	protected com.nlu.entity.service.AlarmLocalService alarmLocalService;
	@BeanReference(type = com.nlu.entity.service.AlarmService.class)
	protected com.nlu.entity.service.AlarmService alarmService;
	@BeanReference(type = AlarmPersistence.class)
	protected AlarmPersistence alarmPersistence;
	@BeanReference(type = AlarmFinder.class)
	protected AlarmFinder alarmFinder;
	@BeanReference(type = com.nlu.entity.service.AlarmInfoLocalService.class)
	protected com.nlu.entity.service.AlarmInfoLocalService alarmInfoLocalService;
	@BeanReference(type = com.nlu.entity.service.AlarmInfoService.class)
	protected com.nlu.entity.service.AlarmInfoService alarmInfoService;
	@BeanReference(type = AlarmInfoPersistence.class)
	protected AlarmInfoPersistence alarmInfoPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private AlarmLocalServiceClpInvoker _clpInvoker = new AlarmLocalServiceClpInvoker();
}