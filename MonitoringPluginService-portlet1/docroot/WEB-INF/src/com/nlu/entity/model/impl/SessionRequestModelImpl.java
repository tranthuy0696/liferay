/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nlu.entity.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nlu.entity.model.SessionRequest;
import com.nlu.entity.model.SessionRequestModel;
import com.nlu.entity.model.SessionRequestSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SessionRequest service. Represents a row in the &quot;SessionRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nlu.entity.model.SessionRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SessionRequestImpl}.
 * </p>
 *
 * @author NgocBao
 * @see SessionRequestImpl
 * @see com.nlu.entity.model.SessionRequest
 * @see com.nlu.entity.model.SessionRequestModel
 * @generated
 */
@JSON(strict = true)
public class SessionRequestModelImpl extends BaseModelImpl<SessionRequest>
	implements SessionRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a session request model instance should use the {@link com.nlu.entity.model.SessionRequest} interface instead.
	 */
	public static final String TABLE_NAME = "SessionRequest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sessionRequestId", Types.BIGINT },
			{ "sessionId", Types.VARCHAR },
			{ "time_", Types.TIMESTAMP },
			{ "ip", Types.VARCHAR },
			{ "browser", Types.VARCHAR },
			{ "os", Types.VARCHAR },
			{ "login", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SessionRequest (sessionRequestId LONG not null primary key,sessionId VARCHAR(75) null,time_ DATE null,ip VARCHAR(75) null,browser VARCHAR(75) null,os VARCHAR(75) null,login BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SessionRequest";
	public static final String ORDER_BY_JPQL = " ORDER BY sessionRequest.sessionRequestId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SessionRequest.sessionRequestId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nlu.entity.model.SessionRequest"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nlu.entity.model.SessionRequest"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SessionRequest toModel(SessionRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SessionRequest model = new SessionRequestImpl();

		model.setSessionRequestId(soapModel.getSessionRequestId());
		model.setSessionId(soapModel.getSessionId());
		model.setTime(soapModel.getTime());
		model.setIp(soapModel.getIp());
		model.setBrowser(soapModel.getBrowser());
		model.setOs(soapModel.getOs());
		model.setLogin(soapModel.getLogin());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SessionRequest> toModels(SessionRequestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SessionRequest> models = new ArrayList<SessionRequest>(soapModels.length);

		for (SessionRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nlu.entity.model.SessionRequest"));

	public SessionRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sessionRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSessionRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sessionRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SessionRequest.class;
	}

	@Override
	public String getModelClassName() {
		return SessionRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sessionRequestId", getSessionRequestId());
		attributes.put("sessionId", getSessionId());
		attributes.put("time", getTime());
		attributes.put("ip", getIp());
		attributes.put("browser", getBrowser());
		attributes.put("os", getOs());
		attributes.put("login", getLogin());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sessionRequestId = (Long)attributes.get("sessionRequestId");

		if (sessionRequestId != null) {
			setSessionRequestId(sessionRequestId);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		Date time = (Date)attributes.get("time");

		if (time != null) {
			setTime(time);
		}

		String ip = (String)attributes.get("ip");

		if (ip != null) {
			setIp(ip);
		}

		String browser = (String)attributes.get("browser");

		if (browser != null) {
			setBrowser(browser);
		}

		String os = (String)attributes.get("os");

		if (os != null) {
			setOs(os);
		}

		Boolean login = (Boolean)attributes.get("login");

		if (login != null) {
			setLogin(login);
		}
	}

	@JSON
	@Override
	public long getSessionRequestId() {
		return _sessionRequestId;
	}

	@Override
	public void setSessionRequestId(long sessionRequestId) {
		_sessionRequestId = sessionRequestId;
	}

	@JSON
	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@JSON
	@Override
	public Date getTime() {
		return _time;
	}

	@Override
	public void setTime(Date time) {
		_time = time;
	}

	@JSON
	@Override
	public String getIp() {
		if (_ip == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		_ip = ip;
	}

	@JSON
	@Override
	public String getBrowser() {
		if (_browser == null) {
			return StringPool.BLANK;
		}
		else {
			return _browser;
		}
	}

	@Override
	public void setBrowser(String browser) {
		_browser = browser;
	}

	@JSON
	@Override
	public String getOs() {
		if (_os == null) {
			return StringPool.BLANK;
		}
		else {
			return _os;
		}
	}

	@Override
	public void setOs(String os) {
		_os = os;
	}

	@JSON
	@Override
	public boolean getLogin() {
		return _login;
	}

	@Override
	public boolean isLogin() {
		return _login;
	}

	@Override
	public void setLogin(boolean login) {
		_login = login;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SessionRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SessionRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SessionRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SessionRequestImpl sessionRequestImpl = new SessionRequestImpl();

		sessionRequestImpl.setSessionRequestId(getSessionRequestId());
		sessionRequestImpl.setSessionId(getSessionId());
		sessionRequestImpl.setTime(getTime());
		sessionRequestImpl.setIp(getIp());
		sessionRequestImpl.setBrowser(getBrowser());
		sessionRequestImpl.setOs(getOs());
		sessionRequestImpl.setLogin(getLogin());

		sessionRequestImpl.resetOriginalValues();

		return sessionRequestImpl;
	}

	@Override
	public int compareTo(SessionRequest sessionRequest) {
		int value = 0;

		if (getSessionRequestId() < sessionRequest.getSessionRequestId()) {
			value = -1;
		}
		else if (getSessionRequestId() > sessionRequest.getSessionRequestId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SessionRequest)) {
			return false;
		}

		SessionRequest sessionRequest = (SessionRequest)obj;

		long primaryKey = sessionRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SessionRequest> toCacheModel() {
		SessionRequestCacheModel sessionRequestCacheModel = new SessionRequestCacheModel();

		sessionRequestCacheModel.sessionRequestId = getSessionRequestId();

		sessionRequestCacheModel.sessionId = getSessionId();

		String sessionId = sessionRequestCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			sessionRequestCacheModel.sessionId = null;
		}

		Date time = getTime();

		if (time != null) {
			sessionRequestCacheModel.time = time.getTime();
		}
		else {
			sessionRequestCacheModel.time = Long.MIN_VALUE;
		}

		sessionRequestCacheModel.ip = getIp();

		String ip = sessionRequestCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			sessionRequestCacheModel.ip = null;
		}

		sessionRequestCacheModel.browser = getBrowser();

		String browser = sessionRequestCacheModel.browser;

		if ((browser != null) && (browser.length() == 0)) {
			sessionRequestCacheModel.browser = null;
		}

		sessionRequestCacheModel.os = getOs();

		String os = sessionRequestCacheModel.os;

		if ((os != null) && (os.length() == 0)) {
			sessionRequestCacheModel.os = null;
		}

		sessionRequestCacheModel.login = getLogin();

		return sessionRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{sessionRequestId=");
		sb.append(getSessionRequestId());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", time=");
		sb.append(getTime());
		sb.append(", ip=");
		sb.append(getIp());
		sb.append(", browser=");
		sb.append(getBrowser());
		sb.append(", os=");
		sb.append(getOs());
		sb.append(", login=");
		sb.append(getLogin());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.nlu.entity.model.SessionRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sessionRequestId</column-name><column-value><![CDATA[");
		sb.append(getSessionRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>time</column-name><column-value><![CDATA[");
		sb.append(getTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip</column-name><column-value><![CDATA[");
		sb.append(getIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>browser</column-name><column-value><![CDATA[");
		sb.append(getBrowser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>os</column-name><column-value><![CDATA[");
		sb.append(getOs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>login</column-name><column-value><![CDATA[");
		sb.append(getLogin());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SessionRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SessionRequest.class
		};
	private long _sessionRequestId;
	private String _sessionId;
	private Date _time;
	private String _ip;
	private String _browser;
	private String _os;
	private boolean _login;
	private SessionRequest _escapedModel;
}